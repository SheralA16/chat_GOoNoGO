package main

import (
	"log"
	"net/http"
	"os"
)

func main() {
	// Crear el hub de chat
	hub := NewHub()

	// Iniciar el hub en una goroutine separada
	go hub.Run()

	// Configurar rutas HTTP
	http.HandleFunc("/", serveHome)
	http.HandleFunc("/ws", func(w http.ResponseWriter, r *http.Request) {
		serveWS(hub, w, r)
	})

	// Servir archivos est√°ticos desde el directorio ./static/
	fs := http.FileServer(http.Dir("./static/"))
	http.Handle("/static/", http.StripPrefix("/static/", fs))

	// ‚≠ê RAILWAY: Obtener puerto de variable de entorno
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // Puerto por defecto para desarrollo local
	}

	// Informaci√≥n de inicio
	log.Println("üöÄ GO O NO GO - Servidor de chat iniciado")
	log.Printf("üì° Puerto: %s", port)
	log.Println("üí¨ WebSocket endpoint: /ws")
	log.Println("üñºÔ∏è Soporte para im√°genes habilitado (m√°x. 5MB)")
	log.Println("üìÅ Archivos est√°ticos servidos desde: ./static/")
	log.Println("‚úÖ Servidor listo para recibir conexiones...")

	// ‚≠ê RAILWAY: Usar puerto din√°mico
	err := http.ListenAndServe(":"+port, nil)
	if err != nil {
		log.Fatal("‚ùå Error iniciando servidor HTTP:", err)
	}
}

// serveHome sirve la p√°gina principal del chat
func serveHome(w http.ResponseWriter, r *http.Request) {
	// Verificar que sea la ruta ra√≠z
	if r.URL.Path != "/" {
		http.Error(w, "P√°gina no encontrada", http.StatusNotFound)
		return
	}

	// Solo permitir m√©todo GET
	if r.Method != "GET" {
		http.Error(w, "M√©todo no permitido", http.StatusMethodNotAllowed)
		return
	}

	// Configurar headers para mejor manejo de archivos multimedia
	w.Header().Set("Cache-Control", "no-cache, no-store, must-revalidate")
	w.Header().Set("Pragma", "no-cache")
	w.Header().Set("Expires", "0")

	// Servir el archivo index.html
	http.ServeFile(w, r, "index.html")
}